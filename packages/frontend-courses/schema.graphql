input SignInInput {
  password: String!
  email: String!
  clientMutationId: String
}

type SignInPayload {
  error: String
  accessToken: String!
  refreshToken: String!
  clientMutationId: String
}

input SignUpInput {
  password: String!
  email: String!
  clientMutationId: String
}

type SignUpPayload {
  error: String!
  accessToken: String!
  refreshToken: String!
  clientMutationId: String
}

input BlacklistUserInput {
  user_gid: String!
  clientMutationId: String
}

type BlacklistUserPayload {
  validAccessToken: String!
  error: String!
  clientMutationId: String
}

input UpdateUserInput {
  clientMutationId: String
  user_gid: String!
  name: String
  apellidoPaterno: String
  apellidoMaterno: String
  RFC: String
  CURP: String
  clabe: String
  mobile: String
}

type UpdateUserPayload {
  validAccessToken: String!
  error: String!
  clientMutationId: String
  user: User!
}

input LendList {
  loan_gid: ID!
  quantity: MXN!
  borrower_id: String!
}

input AddLendsInput {
  clientMutationId: String
  lender_gid: ID!
  lends: [LendList!]!
}

type AddLendsPayload {
  validAccessToken: String!
  error: String!
  clientMutationId: String
  user: User!
}

input AddLoanInput {
  clientMutationId: String
  user_gid: ID!
  term: Int!
  goal: MXN!
}

type AddLoanPayload {
  validAccessToken: String!
  error: String!
  clientMutationId: String
}

input AddFundsInput {
  clientMutationId: String
  user_gid: ID!
  quantity: MXN!
}

type AddFundsPayload {
  validAccessToken: String!
  error: String!
  clientMutationId: String
  user: User
}

input ApproveLoanInput {
  clientMutationId: String
  loan_gid: ID!
}

type ApproveLoanPayload {
  validAccessToken: String!
  error: String!
  clientMutationId: String
}

type Mutation {
  signIn(input: SignInInput!): SignInPayload!
  signUp(input: SignUpInput!): SignUpPayload!
  blacklistUser(input: BlacklistUserInput!): BlacklistUserPayload!
  updateUser(input: UpdateUserInput!): UpdateUserPayload!
  addLends(input: AddLendsInput!): AddLendsPayload!
  addLoan(input: AddLoanInput!): AddLoanPayload!
  addFunds(input: AddFundsInput!): AddFundsPayload!
  approveLoan(input: ApproveLoanInput!): ApproveLoanPayload!
}

type Query {
  user(id: String!): User!
  node(id: ID!): Node
  loans(
    after: String
    first: Int
    before: String
    last: Int
    status: [LoanStatus!]
    borrower_id: String
  ): LoanConnection
  investments(
    after: String
    first: Int
    before: String
    last: Int
    user_id: String!
  ): InvestmentsConnection
  transactions(
    after: String
    first: Int
    before: String
    last: Int
    user_id: String!
  ): BucketTransactionConnection
}

type Loan_Subscribe {
  loan_edge: LoanEdge!
  type: SubscribeType!
}

type Investment_Subscribe {
  investment_edge: InvestmentsEdge!
  type: SubscribeType!
}

type Transaction_Subscribe {
  transaction_edge: BucketTransactionEdge!
  type: SubscribeType!
}

type Subscription {
  loans_subscribe: Loan_Subscribe!
  investments_subscribe(user_gid: ID!): Investment_Subscribe!
  transactions_subscribe(user_gid: ID!): Transaction_Subscribe!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Investment {
  id: ID!
  _id_borrower: String!
  _id_lender: String!
  _id_loan: String!
  quantity: Int!
  created: Date!
  updated: Date!
  status: InvestmentStatus!
}

type InvestmentsConnection {
  pageInfo: PageInfo!
  edges: [InvestmentsEdge]
}

type InvestmentsEdge {
  node: Investment
  cursor: String!
}

type Loan {
  id: ID!
  _id_user: String!
  score: String!
  ROI: Int!
  goal: MXN!
  term: Int!
  raised: MXN!
  expiry: Date!
  status: LoanStatus!
}

type LoanConnection {
  pageInfo: PageInfo!
  edges: [LoanEdge]
}

type LoanEdge {
  node: Loan
  cursor: String!
}

enum TransactionType {
  CREDIT
  WITHDRAWAL
  INVEST
}

enum InvestmentStatus {
  DELAY_PAYMENT
  UP_TO_DATE
  PAST_DUE
  PAID
}

enum LoanStatus {
  PAID
  TO_BE_PAID
  FINANCING
  WAITING_FOR_APPROVAL
  PAST_DUE
}

enum SubscribeType {
  UPDATE
  INSERT
}

type Transaction {
  id: ID!
  _id_borrower: String
  _id_loan: String
  type: TransactionType!
  quantity: MXN!
  created: Date!
}

type BucketTransaction {
  id: String!
  _id_user: String!
  count: Int!
  history: [Transaction!]!
}

type BucketTransactionConnection {
  pageInfo: PageInfo!
  edges: [BucketTransactionEdge]
}

type BucketTransactionEdge {
  node: BucketTransaction
  cursor: String!
}

type User implements Node {
  id: ID!
  name: String!
  apellidoPaterno: String!
  apellidoMaterno: String!
  RFC: String!
  CURP: String!
  clabe: String!
  mobile: String!
  accountTotal: MXN!
  accountAvailable: MXN!
  error: String!
}

scalar Date
scalar MXN
