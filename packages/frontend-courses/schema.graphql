input SignInInput {
  password: String!
  email: String!
  clientMutationId: String
}

type SignInPayload {
  error: String
  accessToken: String!
  refreshToken: String!
  clientMutationId: String
}

input SignUpInput {
  password: String!
  email: String!
  clientMutationId: String
}

type SignUpPayload {
  error: String!
  accessToken: String!
  refreshToken: String!
  clientMutationId: String
}

input BlacklistUserInput {
  refreshToken: String!
  user_gid: String!
  clientMutationId: String
}

type BlacklistUserPayload {
  validAccessToken: String!
  error: String!
  clientMutationId: String
}

input UpdateUserInput {
  clientMutationId: String
  refreshToken: String!
  user_gid: String!
  name: String
  apellidoPaterno: String
  apellidoMaterno: String
  RFC: String
  CURP: String
  clabe: String
  mobile: String
}

type UpdateUserPayload {
  validAccessToken: String!
  error: String!
  clientMutationId: String
  user: User!
}

input LendList {
  loan_gid: ID!
  quantity: Int!
  borrower_id: String!
}

input AddLendsInput {
  clientMutationId: String
  refreshToken: String!
  lender_gid: ID!
  lends: [LendList!]!
}

type AddLendsPayload {
  validAccessToken: String!
  error: String!
  clientMutationId: String
  user: User!
  loans: [Loan!]
}

input AddLoanInput {
  clientMutationId: String
  refreshToken: String!
  user_gid: ID!
  term: Int!
  goal: Int!
}

type AddLoanPayload {
  validAccessToken: String!
  error: String!
  clientMutationId: String
  loan: Loan
}

input AddFundsInput {
  clientMutationId: String
  refreshToken: String!
  user_gid: ID!
  quantity: Int!
}

type AddFundsPayload {
  validAccessToken: String!
  error: String!
  clientMutationId: String
  user: User
}

type Mutation {
  signIn(input: SignInInput!): SignInPayload!
  signUp(input: SignUpInput!): SignUpPayload!
  blacklistUser(input: BlacklistUserInput!): BlacklistUserPayload!
  updateUser(input: UpdateUserInput!): UpdateUserPayload!
  addLends(input: AddLendsInput!): AddLendsPayload!
  addLoan(input: AddLoanInput!): AddLoanPayload!
  addFunds(input: AddFundsInput!): AddFundsPayload!
}

type Query {
  user(id: String!, refreshToken: String!): User!
  node(id: ID!): Node
  loans(after: String, first: Int, before: String, last: Int): LoanConnection
}

schema {
  query: Query
  mutation: Mutation
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Loan {
  id: ID!
  _id_user: String!
  score: Int!
  ROI: Int!
  goal: Int!
  term: Int!
  raised: Int!
  expiry: Date!
}

type LoanConnection {
  pageInfo: PageInfo!
  edges: [LoanEdge]
}

type LoanEdge {
  node: Loan
  cursor: String!
}

type User implements Node {
  id: ID!
  name: String!
  apellidoPaterno: String!
  apellidoMaterno: String!
  RFC: String!
  CURP: String!
  clabe: String!
  mobile: String!
  accountTotal: Int!
  accountAvailable: Int!
  error: String!
}

scalar Date
